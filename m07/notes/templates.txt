// Previously

max_int( int x, int y ) {
	return ( (x>y) ? x : y );
}

max_float( float x, float y ) {
	return ( (x>y) ? x : y );
}

// With templates

template< typename T >
T	max( T const & x, T const & y ) {
	return ( (x>y) ? x : y );
}


int		a = 21;
int		b = 42;

std::cout << max<int>( a, b ) << std::endl;		// Explicit instanciation
std::cout << max( a, b ) << std::endl;			// Implicit instanciation

float	c = -1.7f;
float	d = 4.2;

std::cout << max<float>( c, d ) << std::endl;	// Explicit instanciation
std::cout << max( c, d ) << std::endl;			// Implicit instanciation


// Lists

template< typename T >
class	List {

public:

	List<T>( T const & content ) {
		// Etc...
	}

	List<T>( List<T> const & list ) {
		// Etc...
	}

	~List<T>( void ) {
		// Etc...
	}

	// Etc...

private:
	T *			_content;
	List<T> *	_next;

};


List< int >			a( 42 );
List< float >		b( 3.14f );
List< List< int > >	c( a );
